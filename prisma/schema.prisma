generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  PANITIA
  ADMIN
}

enum Genre {
  Pria
  Wanita
  Gabungan
}

model VerificationToken {
  id       String   @id @default(dbgenerated()) @db.Uuid
  username String   @unique
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model User {
  id            String    @id @default(dbgenerated()) @db.Uuid
  name          String
  email         String    @unique
  emailVerified DateTime?
  username      String    @unique
  password      String
  image         String?
  role          Role      @default(PANITIA)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pos           Pos[]

  @@unique([email, username])
}

model Category {
  id           String   @id @default(dbgenerated()) @db.Uuid
  categoryName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Lomba        Lomba[]
}

model Lomba {
  id         String    @id @default(dbgenerated()) @db.Uuid
  lombaName  String    @unique
  genre      Genre     @default(Gabungan)
  isRegister Boolean   @default(false)
  isDateSet  Boolean   @default(true)
  startAt    DateTime?
  startTime  String?
  isAgeSet   Boolean   @default(false)
  minAge     Int?
  maxAge     Int?
  isEnded    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  peserta    Peserta[]
  pos        Pos[]
  categoryID String?   @db.Uuid
  category   Category? @relation(fields: [categoryID], references: [id], onDelete: SetNull)
}

model Pos {
  id          String       @id @default(dbgenerated()) @db.Uuid
  posName     String
  isPosFinish Boolean?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lombaID     String       @db.Uuid
  lomba       Lomba        @relation(fields: [lombaID], references: [id], onDelete: Cascade)
  userID      String?      @db.Uuid
  user        User?        @relation(fields: [userID], references: [id], onDelete: SetNull)
  peserta     Peserta[]    @relation("PesertaPos")
  PesertaPos  PesertaPos[]
}

model Peserta {
  id         String       @id @default(dbgenerated()) @db.Uuid
  name       String?
  birthday   DateTime?
  alamat     String?
  email      String?
  number     String?
  waktu      DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  lombaID    String       @db.Uuid
  lomba      Lomba        @relation(fields: [lombaID], references: [id], onDelete: Cascade)
  pos        Pos[]        @relation("PesertaPos")
  PesertaPos PesertaPos[]
}

model PesertaPos {
  pesertaId String   @db.Uuid
  posId     String   @db.Uuid
  createdAt DateTime @default(now())

  peserta Peserta @relation(fields: [pesertaId], references: [id], onDelete: Cascade)
  pos     Pos     @relation(fields: [posId], references: [id], onDelete: Cascade)

  @@id([pesertaId, posId])
}
