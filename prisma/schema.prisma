generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  PANITIA
  ADMIN
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id       String   @id @default(uuid())
  username String   @unique
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  username      String    @unique
  password      String
  image         String?
  role          Role      @default(PANITIA)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  pos           Pos[]

  @@unique([email, username])
}

model Category {
  id           String    @id @default(uuid())
  categoryName String    @unique
  startAt      DateTime?
  isEnded      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  peserta      Peserta[]
  pos          Pos[]
}

model Pos {
  id          String       @id @default(uuid())
  posName     String
  isPosFinish Boolean?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryID  String
  category    Category     @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  userID      String?
  user        User?        @relation(fields: [userID], references: [id], onUpdate: NoAction, onDelete: SetNull)
  peserta     Peserta[]    @relation("PesertaPos")
  PesertaPos  PesertaPos[]
}

model Peserta {
  id         String       @id @default(uuid())
  name       String?
  birthday   DateTime?
  alamat     String?
  email      String?
  number     String?
  waktu      DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  categoryID String?
  category   Category?    @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  pos        Pos[]        @relation("PesertaPos")
  PesertaPos PesertaPos[]
}

model PesertaPos {
  pesertaId String
  posId     String
  createdAt DateTime @default(now())

  peserta Peserta @relation(fields: [pesertaId], references: [id], onDelete: Cascade)
  pos     Pos     @relation(fields: [posId], references: [id], onDelete: Cascade)

  @@id([pesertaId, posId])
}
